/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2014-04-03 00:28:35.508000
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include "IKFast.hpp"
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

#define isnan std::isnan

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53;
x0=IKcos(j[1]);
x1=IKcos(j[3]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[3]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[5]);
x8=IKsin(j[2]);
x9=IKsin(j[5]);
x10=IKsin(j[0]);
x11=IKcos(j[0]);
x12=((IkReal(1.00000000000000))*(x6));
x13=((IkReal(0.0446000000000000))*(x10));
x14=((IkReal(0.0446000000000000))*(x0));
x15=((IkReal(1.00000000000000))*(x4));
x16=((IkReal(1.00000000000000))*(x1));
x17=((IkReal(0.0446000000000000))*(x2));
x18=((IkReal(0.0446000000000000))*(x1));
x19=((IkReal(1.00000000000000))*(x0));
x20=((IkReal(1.00000000000000))*(x10));
x21=((IkReal(1.00000000000000))*(x5));
x22=((IkReal(0.0446000000000000))*(x11));
x23=((x1)*(x3));
x24=((x11)*(x2));
x25=((x11)*(x8));
x26=((x3)*(x8));
x27=((x10)*(x2));
x28=((x3)*(x4));
x29=((x11)*(x3));
x30=((x1)*(x14));
x31=((x20)*(x8));
x32=((x16)*(x2)*(x3));
x33=((x17)*(x28));
x34=((x10)*(x15)*(x3));
x35=((x10)*(x19)*(x8));
x36=((x13)*(x23));
x37=((x16)*(x29));
x38=((x18)*(x29));
x39=((((x2)*(x28)))+(((x0)*(x1))));
x40=((((x0)*(x27)))+(x25));
x41=((((IkReal(-1.00000000000000))*(x31)))+(((x0)*(x24))));
x42=((((IkReal(-1.00000000000000))*(x19)*(x24)))+(x31));
x43=((((IkReal(-1.00000000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x19)*(x27))));
x44=((((x19)*(x25)))+(((x2)*(x20))));
x45=((x33)+(x30));
x46=((x4)*(x41));
x47=((x4)*(x40));
x48=((x1)*(x43));
x49=((x47)+(((IkReal(-1.00000000000000))*(x10)*(x16)*(x3))));
x50=((((IkReal(-1.00000000000000))*(x16)*(x42)))+(((x15)*(x29))));
x51=((((IkReal(-1.00000000000000))*(x21)*(x39)))+(((x12)*(((((IkReal(-1.00000000000000))*(x32)))+(((x0)*(x15))))))));
x52=((((x5)*(((x46)+(((IkReal(-1.00000000000000))*(x37)))))))+(((x50)*(x6))));
x53=((((IkReal(-1.00000000000000))*(x21)*(x49)))+(((x12)*(((((IkReal(-1.00000000000000))*(x34)))+(((x16)*(x43))))))));
eerot[0]=((((x5)*(((((x0)*(x4)))+(((IkReal(-1.00000000000000))*(x32)))))))+(((x39)*(x6))));
eerot[1]=((((x51)*(x9)))+(((IkReal(-1.00000000000000))*(x26)*(x7))));
eerot[2]=((((x51)*(x7)))+(((x26)*(x9))));
eetrans[0]=((IkReal(0.0260000000000000))+(x45)+(x14)+(((x45)*(x6)))+(((x5)*(((((IkReal(-1.00000000000000))*(x17)*(x23)))+(((x14)*(x4))))))));
eerot[3]=((((x5)*(((x48)+(((IkReal(-1.00000000000000))*(x34)))))))+(((x49)*(x6))));
eerot[4]=((((x7)*(((x24)+(((IkReal(-1.00000000000000))*(x35)))))))+(((x53)*(x9))));
eerot[5]=((((x9)*(((((IkReal(-1.00000000000000))*(x24)))+(x35)))))+(((x53)*(x7))));
IkReal x54=((IkReal(1.00000000000000))*(x36));
IkReal x55=((IkReal(1.00000000000000))*(x13));
eetrans[1]=((((x6)*(((((IkReal(-1.00000000000000))*(x54)))+(((IkReal(0.0446000000000000))*(x47)))))))+(((IkReal(-1.00000000000000))*(x54)))+(((IkReal(-1.00000000000000))*(x3)*(x55)))+(((x4)*(((((x22)*(x8)))+(((x0)*(x13)*(x2)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x28)*(x55)))+(((x18)*(x43))))))));
eerot[6]=((((x5)*(x50)))+(((x6)*(((x37)+(((IkReal(-1.00000000000000))*(x15)*(x41))))))));
eerot[7]=((((x44)*(x7)))+(((x52)*(x9))));
eerot[8]=((((IkReal(-1.00000000000000))*(x44)*(x9)))+(((x52)*(x7))));
eetrans[2]=((((x6)*(((((IkReal(-0.0446000000000000))*(x46)))+(x38)))))+(((x22)*(x3)))+(((x5)*(((((x22)*(x28)))+(((IkReal(-1.00000000000000))*(x18)*(x42)))))))+(x38)+(((x4)*(((((IkReal(-1.00000000000000))*(x14)*(x24)))+(((x13)*(x8))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r22;
new_r01=((IkReal(-1.00000000000000))*(r21));
new_r02=((IkReal(-1.00000000000000))*(r20));
new_px=((((IkReal(0.0446000000000000))*(r20)))+(((IkReal(-1.00000000000000))*(pz))));
new_r10=((IkReal(-1.00000000000000))*(r12));
new_r11=r11;
new_r12=r10;
new_py=((((IkReal(-0.0446000000000000))*(r10)))+(py));
new_r20=((IkReal(-1.00000000000000))*(r02));
new_r21=r01;
new_r22=r00;
new_pz=((IkReal(-0.0260000000000000))+(((IkReal(-0.0446000000000000))*(r00)))+(px));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
npx=((((py)*(r10)))+(((pz)*(r20)))+(((px)*(r00))));
npy=((((px)*(r01)))+(((pz)*(r21)))+(((py)*(r11))));
npz=((((py)*(r12)))+(((pz)*(r22)))+(((px)*(r02))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((py)*(r00)))+(((IkReal(-1.00000000000000))*(px)*(r10))));
rxp1_0=((((pz)*(r11)))+(((IkReal(-1.00000000000000))*(py)*(r21))));
rxp1_1=((((IkReal(-1.00000000000000))*(pz)*(r01)))+(((px)*(r21))));
rxp1_2=((((py)*(r01)))+(((IkReal(-1.00000000000000))*(px)*(r11))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((py)*(r02)))+(((IkReal(-1.00000000000000))*(px)*(r12))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00000000000000))+(((IkReal(251.362384121941))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
if( IKabs(npy) < IKFAST_ATAN2_MAGTHRESH && IKabs(npx) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x56=IKatan2(npy, npx);
j5array[0]=((IkReal(-1.00000000000000))*(x56));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x56))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x57=((IkReal(49729.0000000000))*(cj3));
IkReal x58=((npy)*(sj5));
IkReal x59=((cj5)*(npx));
gconst0=IKsign(((((IkReal(49729.0000000000))*(x58)))+(((x57)*(x58)))+(((IkReal(49729.0000000000))*(npz)*(sj3)))+(((IkReal(-49729.0000000000))*(x59)))+(((IkReal(-1.00000000000000))*(x57)*(x59)))));
IkReal x60=((npy)*(sj5));
IkReal x61=((IkReal(1.00000000000000))*(cj5)*(npx));
dummyeval[0]=((((npz)*(sj3)))+(x60)+(((IkReal(-1.00000000000000))*(cj3)*(x61)))+(((IkReal(-1.00000000000000))*(x61)))+(((cj3)*(x60))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x62=((IkReal(1.00000000000000))*(npz));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x62)))+(((npy)*(sj3)*(sj5)))+(((IkReal(-1.00000000000000))*(cj3)*(x62)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j3, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))*(pp));
evalcond[2]=((((cj5)*(npy)))+(((npx)*(sj5))));
evalcond[3]=npz;
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(npx)))+(((npy)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(223.000000000000))*((cj5)*(cj5))*((npx)*(npx))))+(((IkReal(223.000000000000))*((npz)*(npz))))+(((IkReal(-446.000000000000))*(cj5)*(npx)*(npy)*(sj5)))+(((IkReal(223.000000000000))*((npy)*(npy))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-2.00000000000000))*(cj5)*(npx)*(npy)*(sj5)))+((npz)*(npz))+((((npy)*(npy))*((sj5)*(sj5))))+((((cj5)*(cj5))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x63=((IkReal(2500.00000000000))*(pp));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(sj5)*(x63)))+(((cj5)*(npx)*(x63))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(npz)*(x63))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(sj5)*(x63)))+(((cj5)*(npx)*(x63)))))), ((gconst1)*(npz)*(x63)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x64=IKsin(j4);
IkReal x65=IKcos(j4);
IkReal x66=((npy)*(sj5));
IkReal x67=((cj5)*(npx));
IkReal x68=((IkReal(1.00000000000000))*(x64));
IkReal x69=((IkReal(0.0892000000000000))*(x64));
IkReal x70=((npz)*(x65));
evalcond[0]=((((IkReal(0.0892000000000000))*(x70)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x66)*(x69)))+(((x67)*(x69))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x66)*(x68)))+(((x64)*(x67)))+(x70));
evalcond[2]=((((x65)*(x67)))+(((IkReal(-1.00000000000000))*(x65)*(x66)))+(((IkReal(-1.00000000000000))*(npz)*(x68))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x371=((IkReal(223.000000000000))*(npz));
IkReal x372=((npy)*(sj5));
IkReal x373=((IkReal(5000.00000000000))*(npz));
IkReal x374=((IkReal(9.94580000000000))*(sj3));
IkReal x375=((IkReal(1115000.00000000))*(sj3));
IkReal x376=((IkReal(1115000.00000000))*(npz));
IkReal x377=((IkReal(223.000000000000))*(sj3));
IkReal x378=((cj5)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x377)*(x378)))+(((IkReal(-1.00000000000000))*(x371)))+(((x372)*(x377)))+(((IkReal(-1.00000000000000))*(cj3)*(x371))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x377)*(x378)))+(((IkReal(-1.00000000000000))*(x371)))+(((x372)*(x377)))+(((IkReal(-1.00000000000000))*(cj3)*(x371)))))):(IkReal)1.0e30))*(((((x372)*(x373)))+(((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(x373)*(x378)))+(((IkReal(-1.00000000000000))*(cj3)*(x374))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x375)*(x378)))+(((x372)*(x375)))+(((IkReal(-1.00000000000000))*(cj3)*(x376)))+(((IkReal(-1.00000000000000))*(x376))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x375)*(x378)))+(((x372)*(x375)))+(((IkReal(-1.00000000000000))*(cj3)*(x376)))+(((IkReal(-1.00000000000000))*(x376)))))):(IkReal)1.0e30))*(((((IkReal(49729.0000000000))*((sj3)*(sj3))))+(((IkReal(-25000000.0000000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x377)*(x378)))+(((IkReal(-1.00000000000000))*(x371)))+(((x372)*(x377)))+(((IkReal(-1.00000000000000))*(cj3)*(x371))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x377)*(x378)))+(((IkReal(-1.00000000000000))*(x371)))+(((x372)*(x377)))+(((IkReal(-1.00000000000000))*(cj3)*(x371)))))):(IkReal)1.0e30))*(((((x372)*(x373)))+(((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(x373)*(x378)))+(((IkReal(-1.00000000000000))*(cj3)*(x374)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x375)*(x378)))+(((x372)*(x375)))+(((IkReal(-1.00000000000000))*(cj3)*(x376)))+(((IkReal(-1.00000000000000))*(x376))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x375)*(x378)))+(((x372)*(x375)))+(((IkReal(-1.00000000000000))*(cj3)*(x376)))+(((IkReal(-1.00000000000000))*(x376)))))):(IkReal)1.0e30))*(((((IkReal(49729.0000000000))*((sj3)*(sj3))))+(((IkReal(-25000000.0000000))*((npz)*(npz))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x377)*(x378)))+(((IkReal(-1.00000000000000))*(x371)))+(((x372)*(x377)))+(((IkReal(-1.00000000000000))*(cj3)*(x371))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x377)*(x378)))+(((IkReal(-1.00000000000000))*(x371)))+(((x372)*(x377)))+(((IkReal(-1.00000000000000))*(cj3)*(x371)))))):(IkReal)1.0e30))*(((((x372)*(x373)))+(((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(x373)*(x378)))+(((IkReal(-1.00000000000000))*(cj3)*(x374)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x375)*(x378)))+(((x372)*(x375)))+(((IkReal(-1.00000000000000))*(cj3)*(x376)))+(((IkReal(-1.00000000000000))*(x376))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x375)*(x378)))+(((x372)*(x375)))+(((IkReal(-1.00000000000000))*(cj3)*(x376)))+(((IkReal(-1.00000000000000))*(x376)))))):(IkReal)1.0e30))*(((((IkReal(49729.0000000000))*((sj3)*(sj3))))+(((IkReal(-25000000.0000000))*((npz)*(npz))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x379=IKcos(j4);
IkReal x380=IKsin(j4);
IkReal x381=((npy)*(sj5));
IkReal x382=((IkReal(0.0446000000000000))*(cj3));
IkReal x383=((cj5)*(npx));
IkReal x384=((IkReal(1.00000000000000))*(x380));
IkReal x385=((IkReal(0.0446000000000000))*(x380));
IkReal x386=((IkReal(0.0892000000000000))*(x380));
IkReal x387=((IkReal(0.0446000000000000))*(x379));
IkReal x388=((npz)*(x379));
evalcond[0]=((((IkReal(-1.00000000000000))*(x379)*(x382)))+(npz)+(((IkReal(-1.00000000000000))*(x387)))+(((IkReal(-1.00000000000000))*(sj3)*(x385))));
evalcond[1]=((((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x381)*(x386)))+(((x383)*(x386)))+(((IkReal(0.0892000000000000))*(x388))));
evalcond[2]=((IkReal(-0.0446000000000000))+(x388)+(((IkReal(-1.00000000000000))*(x381)*(x384)))+(((x380)*(x383)))+(((IkReal(-1.00000000000000))*(x382))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)*(x384)))+(((IkReal(-1.00000000000000))*(x379)*(x381)))+(((x379)*(x383)))+(((IkReal(0.0446000000000000))*(sj3))));
evalcond[4]=((x385)+(x381)+(((IkReal(-1.00000000000000))*(sj3)*(x387)))+(((x380)*(x382)))+(((IkReal(-1.00000000000000))*(x383))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x389=((IkReal(1115000.00000000))*(npz));
IkReal x390=((IkReal(557500.000000000))*(pp));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x390)))+(((npz)*(x389)))+(((IkReal(-1.00000000000000))*(x390))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((sj3)*(x390)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(x389)))+(((npy)*(sj5)*(x389))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(cj3)*(x390)))+(((npz)*(x389)))+(((IkReal(-1.00000000000000))*(x390)))))), ((gconst0)*(((((sj3)*(x390)))+(((IkReal(-1.00000000000000))*(cj5)*(npx)*(x389)))+(((npy)*(sj5)*(x389)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x391=IKcos(j4);
IkReal x392=IKsin(j4);
IkReal x393=((npy)*(sj5));
IkReal x394=((IkReal(0.0446000000000000))*(cj3));
IkReal x395=((cj5)*(npx));
IkReal x396=((IkReal(1.00000000000000))*(x392));
IkReal x397=((IkReal(0.0446000000000000))*(x392));
IkReal x398=((IkReal(0.0892000000000000))*(x392));
IkReal x399=((IkReal(0.0446000000000000))*(x391));
IkReal x400=((npz)*(x391));
evalcond[0]=((((IkReal(-1.00000000000000))*(x399)))+(npz)+(((IkReal(-1.00000000000000))*(sj3)*(x397)))+(((IkReal(-1.00000000000000))*(x391)*(x394))));
evalcond[1]=((((x395)*(x398)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x393)*(x398)))+(((IkReal(0.0892000000000000))*(x400))));
evalcond[2]=((IkReal(-0.0446000000000000))+(((IkReal(-1.00000000000000))*(x393)*(x396)))+(((x392)*(x395)))+(((IkReal(-1.00000000000000))*(x394)))+(x400));
evalcond[3]=((((IkReal(-1.00000000000000))*(x391)*(x393)))+(((IkReal(-1.00000000000000))*(npz)*(x396)))+(((IkReal(0.0446000000000000))*(sj3)))+(((x391)*(x395))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj3)*(x399)))+(((IkReal(-1.00000000000000))*(x395)))+(((x392)*(x394)))+(x397)+(x393));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x71=((IkReal(1.00000000000000))*(sj5));
IkReal x72=((cj4)*(sj3));
IkReal x73=((cj3)*(sj4));
IkReal x74=((((cj3)*(cj4)))+(((sj3)*(sj4))));
IkReal x75=((x72)+(((IkReal(-1.00000000000000))*(x73))));
IkReal x76=((x73)+(((IkReal(-1.00000000000000))*(x72))));
IkReal x77=((cj5)*(x74));
IkReal x78=((cj5)*(x76));
new_r00=((((r02)*(x75)))+(((IkReal(-1.00000000000000))*(r01)*(x71)*(x74)))+(((r00)*(x77))));
new_r01=((((r10)*(x77)))+(((IkReal(-1.00000000000000))*(r11)*(x71)*(x74)))+(((r12)*(x75))));
new_r02=((((r20)*(x77)))+(((IkReal(-1.00000000000000))*(r21)*(x71)*(x74)))+(((r22)*(x75))));
new_r10=((((cj5)*(r01)))+(((r00)*(sj5))));
new_r11=((((cj5)*(r11)))+(((r10)*(sj5))));
new_r12=((((r20)*(sj5)))+(((cj5)*(r21))));
new_r20=((((r02)*(x74)))+(((IkReal(-1.00000000000000))*(r01)*(x71)*(x76)))+(((r00)*(x78))));
new_r21=((((IkReal(-1.00000000000000))*(r11)*(x71)*(x76)))+(((r12)*(x74)))+(((r10)*(x78))));
new_r22=((((r22)*(x74)))+(((r20)*(x78)))+(((IkReal(-1.00000000000000))*(r21)*(x71)*(x76))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x79=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x79;
evalcond[2]=x79;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x79;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
IkReal j2mul = 1;
j2=0;
IkReal j0mul=IkReal(-1.00000000000000);
if( IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r10)))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0=IKatan2(((IkReal(-1.00000000000000))*(new_r10)), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].fmul = j0mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

} else
{
IkReal x80=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=x80;
evalcond[2]=x80;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x81));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x81))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst18)*(((((cj2)*(new_r01)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst18)*(((((cj2)*(new_r01)))+(((new_r00)*(sj2)))))), ((gconst18)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x82=IKsin(j0);
IkReal x83=IKcos(j0);
IkReal x84=((IkReal(1.00000000000000))*(sj2));
IkReal x85=((cj2)*(x82));
IkReal x86=((sj2)*(x82));
IkReal x87=((IkReal(1.00000000000000))*(x83));
IkReal x88=((x83)*(x84));
evalcond[0]=((((cj2)*(new_r10)))+(x82)+(((new_r00)*(sj2))));
evalcond[1]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x87))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x88)))+(x85)+(new_r10));
evalcond[3]=((((cj2)*(x83)))+(new_r00)+(x86));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj2)*(x87)))+(((IkReal(-1.00000000000000))*(x82)*(x84)))+(new_r11));
evalcond[5]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x84)))+(x83));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r11)*(x84)))+(((cj2)*(new_r01)))+(x82));
evalcond[7]=((((IkReal(-1.00000000000000))*(x88)))+(new_r01)+(x85));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst17)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst17)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2)))))), ((gconst17)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x89=IKsin(j0);
IkReal x90=IKcos(j0);
IkReal x91=((IkReal(1.00000000000000))*(sj2));
IkReal x92=((cj2)*(x89));
IkReal x93=((sj2)*(x89));
IkReal x94=((IkReal(1.00000000000000))*(x90));
IkReal x95=((x90)*(x91));
evalcond[0]=((((cj2)*(new_r10)))+(x89)+(((new_r00)*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x94)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x95)))+(new_r10)+(x92));
evalcond[3]=((((cj2)*(x90)))+(new_r00)+(x93));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj2)*(x94)))+(((IkReal(-1.00000000000000))*(x89)*(x91)))+(new_r11));
evalcond[5]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x91)))+(x90));
evalcond[6]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x91)))+(x89));
evalcond[7]=((new_r01)+(((IkReal(-1.00000000000000))*(x95)))+(x92));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x96=((IkReal(-1.00000000000000))*(gconst2));
if( IKabs(((new_r21)*(x96))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x96))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x96)), ((new_r20)*(x96)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj1)*(IKcos(j0)))));
evalcond[1]=((new_r21)+(((sj1)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
IkReal x97=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x97;
evalcond[2]=x97;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=new_r20;
evalcond[10]=new_r21;
evalcond[11]=x97;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((new_r02)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r12)))));
dummyeval[0]=((((new_r02)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x98=((gconst8)*(new_r10));
if( IKabs(((new_r12)*(x98))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x98))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x98)), ((IkReal(-1.00000000000000))*(new_r02)*(x98)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x99=IKcos(j2);
IkReal x100=IKsin(j2);
IkReal x101=((IkReal(1.00000000000000))*(cj0));
IkReal x102=((IkReal(1.00000000000000))*(sj0));
IkReal x103=((sj0)*(x100));
IkReal x104=((IkReal(1.00000000000000))*(x100));
IkReal x105=((x101)*(x99));
evalcond[0]=((((new_r12)*(x99)))+(((new_r02)*(x100))));
evalcond[1]=((sj0)+(((new_r00)*(x100)))+(((new_r10)*(x99))));
evalcond[2]=((((new_r01)*(x100)))+(((IkReal(-1.00000000000000))*(x101)))+(((new_r11)*(x99))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r12)*(x104)))+(((new_r02)*(x99))));
evalcond[4]=((((sj0)*(x99)))+(((cj0)*(x100)))+(new_r10));
evalcond[5]=((new_r00)+(((IkReal(-1.00000000000000))*(x105)))+(x103));
evalcond[6]=((((IkReal(-1.00000000000000))*(x105)))+(x103)+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x101)))+(((new_r00)*(x99)))+(((IkReal(-1.00000000000000))*(new_r10)*(x104))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x102)))+(((new_r01)*(x99)))+(((IkReal(-1.00000000000000))*(new_r11)*(x104))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x102)*(x99)))+(new_r01)+(((IkReal(-1.00000000000000))*(x100)*(x101))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x106=((gconst7)*(sj0));
if( IKabs(((new_r12)*(x106))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x106))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x106)), ((IkReal(-1.00000000000000))*(new_r02)*(x106)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x107=IKcos(j2);
IkReal x108=IKsin(j2);
IkReal x109=((IkReal(1.00000000000000))*(cj0));
IkReal x110=((IkReal(1.00000000000000))*(sj0));
IkReal x111=((sj0)*(x108));
IkReal x112=((IkReal(1.00000000000000))*(x108));
IkReal x113=((x107)*(x109));
evalcond[0]=((((new_r12)*(x107)))+(((new_r02)*(x108))));
evalcond[1]=((sj0)+(((new_r00)*(x108)))+(((new_r10)*(x107))));
evalcond[2]=((((new_r01)*(x108)))+(((IkReal(-1.00000000000000))*(x109)))+(((new_r11)*(x107))));
evalcond[3]=((((new_r02)*(x107)))+(((IkReal(-1.00000000000000))*(new_r12)*(x112))));
evalcond[4]=((((sj0)*(x107)))+(((cj0)*(x108)))+(new_r10));
evalcond[5]=((new_r00)+(x111)+(((IkReal(-1.00000000000000))*(x113))));
evalcond[6]=((x111)+(((IkReal(-1.00000000000000))*(x113)))+(new_r11));
evalcond[7]=((((new_r00)*(x107)))+(((IkReal(-1.00000000000000))*(x109)))+(((IkReal(-1.00000000000000))*(new_r10)*(x112))));
evalcond[8]=((((new_r01)*(x107)))+(((IkReal(-1.00000000000000))*(new_r11)*(x112)))+(((IkReal(-1.00000000000000))*(x110))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x108)*(x109)))+(((IkReal(-1.00000000000000))*(x107)*(x110)))+(new_r01));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x114=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=x114;
evalcond[2]=x114;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[10]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[11]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*(new_r12)*(sj0)))+(((cj0)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r12)*(sj0)))+(((cj0)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x115=((gconst10)*(new_r00));
if( IKabs(((new_r12)*(x115))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x115))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x115)), ((IkReal(-1.00000000000000))*(new_r02)*(x115)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x116=IKcos(j2);
IkReal x117=IKsin(j2);
IkReal x118=((IkReal(1.00000000000000))*(cj0));
IkReal x119=((sj0)*(x116));
IkReal x120=((IkReal(1.00000000000000))*(x117));
IkReal x121=((x117)*(x118));
evalcond[0]=((((new_r02)*(x117)))+(((new_r12)*(x116))));
evalcond[1]=((((new_r00)*(x117)))+(sj0)+(((new_r10)*(x116))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x118)))+(((new_r11)*(x116)))+(((new_r01)*(x117))));
evalcond[3]=((((new_r02)*(x116)))+(((IkReal(-1.00000000000000))*(new_r12)*(x120))));
evalcond[4]=((x119)+(new_r10)+(((IkReal(-1.00000000000000))*(x121))));
evalcond[5]=((((cj0)*(x116)))+(new_r00)+(((sj0)*(x117))));
evalcond[6]=((((IkReal(-1.00000000000000))*(sj0)*(x120)))+(((IkReal(-1.00000000000000))*(x116)*(x118)))+(new_r11));
evalcond[7]=((((new_r00)*(x116)))+(cj0)+(((IkReal(-1.00000000000000))*(new_r10)*(x120))));
evalcond[8]=((sj0)+(((new_r01)*(x116)))+(((IkReal(-1.00000000000000))*(new_r11)*(x120))));
evalcond[9]=((new_r01)+(x119)+(((IkReal(-1.00000000000000))*(x121))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x122=((gconst9)*(sj0));
if( IKabs(((new_r12)*(x122))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x122))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x122)), ((IkReal(-1.00000000000000))*(new_r02)*(x122)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x123=IKcos(j2);
IkReal x124=IKsin(j2);
IkReal x125=((IkReal(1.00000000000000))*(cj0));
IkReal x126=((sj0)*(x123));
IkReal x127=((IkReal(1.00000000000000))*(x124));
IkReal x128=((x124)*(x125));
evalcond[0]=((((new_r12)*(x123)))+(((new_r02)*(x124))));
evalcond[1]=((((new_r00)*(x124)))+(sj0)+(((new_r10)*(x123))));
evalcond[2]=((((new_r11)*(x123)))+(((IkReal(-1.00000000000000))*(x125)))+(((new_r01)*(x124))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r12)*(x127)))+(((new_r02)*(x123))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x128)))+(x126)+(new_r10));
evalcond[5]=((((cj0)*(x123)))+(new_r00)+(((sj0)*(x124))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x123)*(x125)))+(((IkReal(-1.00000000000000))*(sj0)*(x127)))+(new_r11));
evalcond[7]=((((new_r00)*(x123)))+(cj0)+(((IkReal(-1.00000000000000))*(new_r10)*(x127))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x127)))+(sj0)+(((new_r01)*(x123))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x128)))+(x126)+(new_r01));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst6)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst6)*(new_r12)), ((gconst6)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x129=IKcos(j2);
IkReal x130=IKsin(j2);
IkReal x131=((IkReal(1.00000000000000))*(sj1));
IkReal x132=((IkReal(1.00000000000000))*(cj0));
IkReal x133=((IkReal(1.00000000000000))*(x130));
IkReal x134=((new_r12)*(x130));
IkReal x135=((new_r01)*(x129));
IkReal x136=((new_r10)*(x130));
IkReal x137=((cj1)*(x130));
IkReal x138=((new_r00)*(x129));
IkReal x139=((new_r02)*(x129));
IkReal x140=((IkReal(1.00000000000000))*(cj1)*(x129));
evalcond[0]=((((sj1)*(x130)))+(new_r12));
evalcond[1]=((new_r02)+(((IkReal(-1.00000000000000))*(x129)*(x131))));
evalcond[2]=((((new_r02)*(x130)))+(((new_r12)*(x129))));
evalcond[3]=((sj0)+(((new_r00)*(x130)))+(((new_r10)*(x129))));
evalcond[4]=((((new_r01)*(x130)))+(((IkReal(-1.00000000000000))*(x132)))+(((new_r11)*(x129))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x131)))+(((IkReal(-1.00000000000000))*(new_r12)*(x133)))+(x139));
evalcond[6]=((((sj0)*(x129)))+(((cj0)*(x137)))+(new_r10));
evalcond[7]=((((sj0)*(x130)))+(new_r00)+(((IkReal(-1.00000000000000))*(cj1)*(x129)*(x132))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x129)*(x132)))+(((sj0)*(x137)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj1)*(x132)))+(x138)+(((IkReal(-1.00000000000000))*(new_r10)*(x133))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r11)*(x133)))+(((IkReal(-1.00000000000000))*(cj1)*(sj0)))+(x135));
evalcond[11]=((((IkReal(-1.00000000000000))*(x130)*(x132)))+(((IkReal(-1.00000000000000))*(sj0)*(x140)))+(new_r01));
evalcond[12]=((((cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(x131)*(x136)))+(((sj1)*(x138))));
evalcond[13]=((((sj1)*(x135)))+(((IkReal(-1.00000000000000))*(new_r11)*(x130)*(x131)))+(((cj1)*(new_r21))));
evalcond[14]=((((IkReal(-1.00000000000000))*(cj1)*(x139)))+(((cj1)*(x134)))+(((new_r22)*(sj1))));
evalcond[15]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(x131)*(x134)))+(((sj1)*(x139))));
evalcond[16]=((((cj1)*(x136)))+(((new_r20)*(sj1)))+(cj0)+(((IkReal(-1.00000000000000))*(cj1)*(x138))));
evalcond[17]=((sj0)+(((IkReal(-1.00000000000000))*(cj1)*(x135)))+(((new_r21)*(sj1)))+(((new_r11)*(x137))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  || IKabs(evalcond[15]) > 0.000001  || IKabs(evalcond[16]) > 0.000001  || IKabs(evalcond[17]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst5)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst5)*(new_r12)), ((gconst5)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x141=IKcos(j2);
IkReal x142=IKsin(j2);
IkReal x143=((IkReal(1.00000000000000))*(sj1));
IkReal x144=((IkReal(1.00000000000000))*(cj0));
IkReal x145=((IkReal(1.00000000000000))*(x142));
IkReal x146=((new_r12)*(x142));
IkReal x147=((new_r01)*(x141));
IkReal x148=((new_r10)*(x142));
IkReal x149=((cj1)*(x142));
IkReal x150=((new_r00)*(x141));
IkReal x151=((new_r02)*(x141));
IkReal x152=((IkReal(1.00000000000000))*(cj1)*(x141));
evalcond[0]=((((sj1)*(x142)))+(new_r12));
evalcond[1]=((((IkReal(-1.00000000000000))*(x141)*(x143)))+(new_r02));
evalcond[2]=((((new_r12)*(x141)))+(((new_r02)*(x142))));
evalcond[3]=((((new_r10)*(x141)))+(sj0)+(((new_r00)*(x142))));
evalcond[4]=((((new_r11)*(x141)))+(((new_r01)*(x142)))+(((IkReal(-1.00000000000000))*(x144))));
evalcond[5]=((x151)+(((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(new_r12)*(x145))));
evalcond[6]=((((cj0)*(x149)))+(((sj0)*(x141)))+(new_r10));
evalcond[7]=((((sj0)*(x142)))+(((IkReal(-1.00000000000000))*(cj1)*(x141)*(x144)))+(new_r00));
evalcond[8]=((((sj0)*(x149)))+(((IkReal(-1.00000000000000))*(x141)*(x144)))+(new_r11));
evalcond[9]=((((IkReal(-1.00000000000000))*(cj1)*(x144)))+(x150)+(((IkReal(-1.00000000000000))*(new_r10)*(x145))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r11)*(x145)))+(((IkReal(-1.00000000000000))*(cj1)*(sj0)))+(x147));
evalcond[11]=((((IkReal(-1.00000000000000))*(sj0)*(x152)))+(new_r01)+(((IkReal(-1.00000000000000))*(x142)*(x144))));
evalcond[12]=((((sj1)*(x150)))+(((IkReal(-1.00000000000000))*(x143)*(x148)))+(((cj1)*(new_r20))));
evalcond[13]=((((IkReal(-1.00000000000000))*(new_r11)*(x142)*(x143)))+(((sj1)*(x147)))+(((cj1)*(new_r21))));
evalcond[14]=((((IkReal(-1.00000000000000))*(cj1)*(x151)))+(((cj1)*(x146)))+(((new_r22)*(sj1))));
evalcond[15]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(x143)*(x146)))+(((sj1)*(x151))));
evalcond[16]=((((IkReal(-1.00000000000000))*(cj1)*(x150)))+(((new_r20)*(sj1)))+(cj0)+(((cj1)*(x148))));
evalcond[17]=((((IkReal(-1.00000000000000))*(cj1)*(x147)))+(sj0)+(((new_r21)*(sj1)))+(((new_r11)*(x149))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  || IKabs(evalcond[15]) > 0.000001  || IKabs(evalcond[16]) > 0.000001  || IKabs(evalcond[17]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst4)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst4)*(new_r12)), ((gconst4)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x153=IKcos(j2);
IkReal x154=IKsin(j2);
IkReal x155=((IkReal(1.00000000000000))*(sj1));
IkReal x156=((sj1)*(x153));
IkReal x157=((new_r02)*(x153));
IkReal x158=((new_r12)*(x154));
evalcond[0]=((((sj1)*(x154)))+(new_r12));
evalcond[1]=((((IkReal(-1.00000000000000))*(x153)*(x155)))+(new_r02));
evalcond[2]=((((new_r12)*(x153)))+(((new_r02)*(x154))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x155)))+(x157)+(((IkReal(-1.00000000000000))*(x158))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x154)*(x155)))+(((new_r00)*(x156)))+(((cj1)*(new_r20))));
evalcond[5]=((((cj1)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x154)*(x155)))+(((new_r01)*(x156))));
evalcond[6]=((((cj1)*(x158)))+(((IkReal(-1.00000000000000))*(cj1)*(x157)))+(((new_r22)*(sj1))));
evalcond[7]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(x155)*(x158)))+(((new_r02)*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x159=((new_r22)+(((IkReal(-1.00000000000000))*(cj1))));
IkReal x160=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x159;
evalcond[2]=x159;
evalcond[3]=((sj1)+(new_r12));
evalcond[4]=new_r02;
evalcond[5]=new_r02;
evalcond[6]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[7]=((((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[8]=((((cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x160))));
evalcond[9]=((((cj1)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x160))));
evalcond[10]=((((cj1)*(new_r12)))+(((new_r22)*(sj1))));
evalcond[11]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r12)*(x160))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r00)))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r00)), new_r01);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x161=IKsin(j0);
IkReal x162=IKcos(j0);
evalcond[0]=((new_r20)+(((sj1)*(x162))));
evalcond[1]=((((sj1)*(x161)))+(new_r21));
evalcond[2]=((x161)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x162)))+(new_r01));
evalcond[4]=((((cj1)*(x162)))+(new_r10));
evalcond[5]=((((cj1)*(x161)))+(new_r11));
evalcond[6]=((((new_r20)*(sj1)))+(x162)+(((cj1)*(new_r10))));
evalcond[7]=((((cj1)*(new_r11)))+(x161)+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x163=((new_r22)+(((IkReal(-1.00000000000000))*(cj1))));
IkReal x164=((((IkReal(-1.00000000000000))*(sj1)))+(new_r12));
IkReal x165=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x163;
evalcond[2]=x163;
evalcond[3]=x164;
evalcond[4]=new_r02;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x164;
evalcond[7]=((((new_r10)*(sj1)))+(((cj1)*(new_r20))));
evalcond[8]=((((new_r11)*(sj1)))+(((cj1)*(new_r21))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r12)*(x165)))+(((new_r22)*(sj1))));
evalcond[10]=((IkReal(-1.00000000000000))+(((new_r12)*(sj1)))+(((cj1)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x166=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x166;
evalcond[4]=new_r02;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x166;
evalcond[7]=new_r10;
evalcond[8]=new_r11;
evalcond[9]=new_r10;
evalcond[10]=new_r11;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=new_r22;
evalcond[14]=x166;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, ((IkReal(-1.00000000000000))*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x167=IKsin(j0);
IkReal x168=IKcos(j0);
evalcond[0]=((new_r20)+(x168));
evalcond[1]=((new_r21)+(x167));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(x167));
evalcond[3]=((((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x169=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x169;
evalcond[4]=new_r02;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x169;
evalcond[7]=new_r10;
evalcond[8]=new_r11;
evalcond[9]=new_r10;
evalcond[10]=new_r11;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r21, new_r20);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x170=IKsin(j0);
IkReal x171=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x171))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x170)))+(new_r21));
evalcond[2]=((x170)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x172=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x172;
evalcond[2]=x172;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[14]=x172;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, new_r10);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x173=IKsin(j0);
IkReal x174=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((x173)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x174))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x174)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x173)))+(new_r11));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x175=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=x175;
evalcond[2]=x175;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=new_r12;
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, ((IkReal(-1.00000000000000))*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x176=IKcos(j0);
IkReal x177=IKsin(j0);
evalcond[0]=((x177)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x176))));
evalcond[2]=((x176)+(new_r10));
evalcond[3]=((x177)+(new_r11));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((new_r11)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r11)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((new_r11)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x178=IKsin(j0);
IkReal x179=IKcos(j0);
IkReal x180=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((sj1)*(x179)))+(new_r20));
evalcond[1]=((((sj1)*(x178)))+(new_r21));
evalcond[2]=((x178)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x179)*(x180)))+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(x178)*(x180)))+(new_r11));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r10)*(x180)))+(x179)+(((new_r20)*(sj1))));
evalcond[7]=((x178)+(((new_r21)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r11)*(x180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x181=IKsin(j0);
IkReal x182=IKcos(j0);
IkReal x183=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((sj1)*(x182)))+(new_r20));
evalcond[1]=((new_r21)+(((sj1)*(x181))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(x181));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x182))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x182)*(x183)))+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(x181)*(x183)))+(new_r11));
evalcond[6]=((x182)+(((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r10)*(x183))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r11)*(x183)))+(x181)+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x184=((IkReal(-1.00000000000000))*(gconst12));
if( IKabs(((new_r21)*(x184))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x184))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x184)), ((new_r20)*(x184)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x185=IKsin(j0);
IkReal x186=IKcos(j0);
IkReal x187=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((new_r20)+(((sj1)*(x186))));
evalcond[1]=((new_r21)+(((sj1)*(x185))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(x185));
evalcond[3]=((((IkReal(-1.00000000000000))*(x186)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x186)*(x187)))+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(x185)*(x187)))+(new_r11));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r10)*(x187)))+(x186)+(((new_r20)*(sj1))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r11)*(x187)))+(x185)+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x188=((IkReal(-1.00000000000000))+(new_r22));
IkReal x189=((new_r12)*(sj2));
IkReal x190=((new_r02)*(sj2));
IkReal x191=((cj2)*(new_r12));
IkReal x192=((cj2)*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x188;
evalcond[2]=x188;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((x191)+(x190));
evalcond[10]=((((IkReal(-1.00000000000000))*(x191)))+(((IkReal(-1.00000000000000))*(x190))));
evalcond[11]=((x192)+(((IkReal(-1.00000000000000))*(x189))));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=((x189)+(((IkReal(-1.00000000000000))*(x192))));
evalcond[15]=x188;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst14)*(((((cj2)*(new_r10)))+(((new_r11)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((new_r10)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((cj2)*(new_r10)))+(((new_r11)*(sj2)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((new_r10)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x193=IKsin(j0);
IkReal x194=IKcos(j0);
IkReal x195=((IkReal(1.00000000000000))*(sj2));
IkReal x196=((sj2)*(x193));
IkReal x197=((IkReal(1.00000000000000))*(x194));
IkReal x198=((sj2)*(x194));
IkReal x199=((cj2)*(x193));
IkReal x200=((cj2)*(x197));
evalcond[0]=((((cj2)*(new_r10)))+(x193)+(((new_r00)*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x197)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[2]=((x199)+(x198)+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x200)))+(x196)+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(x200)))+(x196)+(new_r11));
evalcond[5]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(new_r10)*(x195))));
evalcond[6]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x195)))+(((IkReal(-1.00000000000000))*(x193))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x194)*(x195)))+(new_r01)+(((IkReal(-1.00000000000000))*(x199))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst13)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((new_r10)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2)))))), ((gconst13)*(((((new_r10)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r00)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x201=IKsin(j0);
IkReal x202=IKcos(j0);
IkReal x203=((IkReal(1.00000000000000))*(sj2));
IkReal x204=((sj2)*(x201));
IkReal x205=((IkReal(1.00000000000000))*(x202));
IkReal x206=((sj2)*(x202));
IkReal x207=((cj2)*(x201));
IkReal x208=((cj2)*(x205));
evalcond[0]=((((cj2)*(new_r10)))+(x201)+(((new_r00)*(sj2))));
evalcond[1]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[2]=((x207)+(x206)+(new_r10));
evalcond[3]=((x204)+(new_r00)+(((IkReal(-1.00000000000000))*(x208))));
evalcond[4]=((x204)+(new_r11)+(((IkReal(-1.00000000000000))*(x208))));
evalcond[5]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x203)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[6]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x203)))+(((IkReal(-1.00000000000000))*(x201))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x202)*(x203)))+(new_r01)+(((IkReal(-1.00000000000000))*(x207))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x209=((IkReal(1.00000000000000))+(new_r22));
IkReal x210=((IkReal(1.00000000000000))*(new_r12));
IkReal x211=((new_r02)*(sj2));
IkReal x212=((((IkReal(-1.00000000000000))*(sj2)*(x210)))+(((cj2)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=x209;
evalcond[2]=x209;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((x211)+(((cj2)*(new_r12))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj2)*(x210)))+(((IkReal(-1.00000000000000))*(x211))));
evalcond[11]=x212;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=x212;
evalcond[15]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst16)*(((((cj2)*(new_r01)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((((cj2)*(new_r01)))+(((new_r00)*(sj2)))))), ((gconst16)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x213=IKsin(j0);
IkReal x214=IKcos(j0);
IkReal x215=((IkReal(1.00000000000000))*(sj2));
IkReal x216=((cj2)*(x213));
IkReal x217=((sj2)*(x213));
IkReal x218=((IkReal(1.00000000000000))*(x214));
IkReal x219=((x214)*(x215));
evalcond[0]=((((cj2)*(new_r10)))+(x213)+(((new_r00)*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x218)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[2]=((x216)+(((IkReal(-1.00000000000000))*(x219)))+(new_r10));
evalcond[3]=((x217)+(new_r00)+(((cj2)*(x214))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x213)*(x215)))+(((IkReal(-1.00000000000000))*(cj2)*(x218)))+(new_r11));
evalcond[5]=((((cj2)*(new_r00)))+(x214)+(((IkReal(-1.00000000000000))*(new_r10)*(x215))));
evalcond[6]=((x213)+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x215))));
evalcond[7]=((x216)+(((IkReal(-1.00000000000000))*(x219)))+(new_r01));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst15)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2)))))), ((gconst15)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x220=IKsin(j0);
IkReal x221=IKcos(j0);
IkReal x222=((IkReal(1.00000000000000))*(sj2));
IkReal x223=((cj2)*(x220));
IkReal x224=((sj2)*(x220));
IkReal x225=((IkReal(1.00000000000000))*(x221));
IkReal x226=((x221)*(x222));
evalcond[0]=((((cj2)*(new_r10)))+(x220)+(((new_r00)*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x225)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[2]=((x223)+(((IkReal(-1.00000000000000))*(x226)))+(new_r10));
evalcond[3]=((((cj2)*(x221)))+(x224)+(new_r00));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj2)*(x225)))+(((IkReal(-1.00000000000000))*(x220)*(x222)))+(new_r11));
evalcond[5]=((((cj2)*(new_r00)))+(x221)+(((IkReal(-1.00000000000000))*(new_r10)*(x222))));
evalcond[6]=((((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x222)))+(x220));
evalcond[7]=((x223)+(new_r01)+(((IkReal(-1.00000000000000))*(x226))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x227=((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30);
if( IKabs(((x227)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((cj1)*(new_r20)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x227))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x227)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((cj1)*(new_r20)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x227)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x227)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((cj1)*(new_r20)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x227)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x228=IKsin(j0);
IkReal x229=IKcos(j0);
IkReal x230=((cj2)*(new_r01));
IkReal x231=((IkReal(1.00000000000000))*(cj1));
IkReal x232=((IkReal(1.00000000000000))*(sj2));
IkReal x233=((cj2)*(new_r00));
IkReal x234=((cj1)*(sj2));
IkReal x235=((sj2)*(x229));
IkReal x236=((IkReal(1.00000000000000))*(x229));
IkReal x237=((sj2)*(x228));
IkReal x238=((cj2)*(x228));
evalcond[0]=((new_r20)+(((sj1)*(x229))));
evalcond[1]=((((sj1)*(x228)))+(new_r21));
evalcond[2]=((((cj2)*(new_r10)))+(x228)+(((new_r00)*(sj2))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x236)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[4]=((x238)+(((x229)*(x234)))+(new_r10));
evalcond[5]=((x237)+(((IkReal(-1.00000000000000))*(cj2)*(x229)*(x231)))+(new_r00));
evalcond[6]=((((x228)*(x234)))+(((IkReal(-1.00000000000000))*(cj2)*(x236)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x232)))+(x233)+(((IkReal(-1.00000000000000))*(x229)*(x231))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x228)*(x231)))+(x230)+(((IkReal(-1.00000000000000))*(new_r11)*(x232))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x229)*(x232)))+(((IkReal(-1.00000000000000))*(x231)*(x238)))+(new_r01));
evalcond[10]=((((IkReal(-1.00000000000000))*(x231)*(x233)))+(((new_r10)*(x234)))+(((new_r20)*(sj1)))+(x229));
evalcond[11]=((((IkReal(-1.00000000000000))*(x230)*(x231)))+(((new_r21)*(sj1)))+(x228)+(((new_r11)*(x234))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x239=IKsin(j0);
IkReal x240=IKcos(j0);
IkReal x241=((cj2)*(new_r01));
IkReal x242=((IkReal(1.00000000000000))*(cj1));
IkReal x243=((IkReal(1.00000000000000))*(sj2));
IkReal x244=((cj2)*(new_r00));
IkReal x245=((cj1)*(sj2));
IkReal x246=((sj2)*(x240));
IkReal x247=((IkReal(1.00000000000000))*(x240));
IkReal x248=((sj2)*(x239));
IkReal x249=((cj2)*(x239));
evalcond[0]=((((sj1)*(x240)))+(new_r20));
evalcond[1]=((new_r21)+(((sj1)*(x239))));
evalcond[2]=((((cj2)*(new_r10)))+(x239)+(((new_r00)*(sj2))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x247)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[4]=((x249)+(((x240)*(x245)))+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj2)*(x240)*(x242)))+(x248)+(new_r00));
evalcond[6]=((((x239)*(x245)))+(((IkReal(-1.00000000000000))*(cj2)*(x247)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r10)*(x243)))+(x244)+(((IkReal(-1.00000000000000))*(x240)*(x242))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x243)))+(((IkReal(-1.00000000000000))*(x239)*(x242)))+(x241));
evalcond[9]=((((IkReal(-1.00000000000000))*(x240)*(x243)))+(((IkReal(-1.00000000000000))*(x242)*(x249)))+(new_r01));
evalcond[10]=((((new_r10)*(x245)))+(((IkReal(-1.00000000000000))*(x242)*(x244)))+(((new_r20)*(sj1)))+(x240));
evalcond[11]=((((new_r11)*(x245)))+(x239)+(((IkReal(-1.00000000000000))*(x241)*(x242)))+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x250=((IkReal(-1.00000000000000))*(gconst11));
if( IKabs(((new_r21)*(x250))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x250))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x250)), ((new_r20)*(x250)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x251=IKsin(j0);
IkReal x252=IKcos(j0);
IkReal x253=((cj2)*(new_r01));
IkReal x254=((IkReal(1.00000000000000))*(cj1));
IkReal x255=((IkReal(1.00000000000000))*(sj2));
IkReal x256=((cj2)*(new_r00));
IkReal x257=((cj1)*(sj2));
IkReal x258=((sj2)*(x252));
IkReal x259=((IkReal(1.00000000000000))*(x252));
IkReal x260=((sj2)*(x251));
IkReal x261=((cj2)*(x251));
evalcond[0]=((new_r20)+(((sj1)*(x252))));
evalcond[1]=((((sj1)*(x251)))+(new_r21));
evalcond[2]=((((cj2)*(new_r10)))+(x251)+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x259))));
evalcond[4]=((((x252)*(x257)))+(x261)+(new_r10));
evalcond[5]=((new_r00)+(x260)+(((IkReal(-1.00000000000000))*(cj2)*(x252)*(x254))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj2)*(x259)))+(new_r11)+(((x251)*(x257))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x252)*(x254)))+(((IkReal(-1.00000000000000))*(new_r10)*(x255)))+(x256));
evalcond[8]=((x253)+(((IkReal(-1.00000000000000))*(new_r11)*(x255)))+(((IkReal(-1.00000000000000))*(x251)*(x254))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x252)*(x255)))+(((IkReal(-1.00000000000000))*(x254)*(x261)))+(new_r01));
evalcond[10]=((((IkReal(-1.00000000000000))*(x254)*(x256)))+(x252)+(((new_r20)*(sj1)))+(((new_r10)*(x257))));
evalcond[11]=((((new_r11)*(x257)))+(((IkReal(-1.00000000000000))*(x253)*(x254)))+(x251)+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst3)*(new_r12))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(new_r02))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst3)*(new_r12)), ((gconst3)*(new_r02)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x262=IKcos(j2);
IkReal x263=IKsin(j2);
IkReal x264=((IkReal(1.00000000000000))*(sj1));
IkReal x265=((sj1)*(x262));
IkReal x266=((new_r02)*(x262));
IkReal x267=((new_r12)*(x263));
evalcond[0]=((((sj1)*(x263)))+(new_r12));
evalcond[1]=((new_r02)+(((IkReal(-1.00000000000000))*(x262)*(x264))));
evalcond[2]=((((new_r12)*(x262)))+(((new_r02)*(x263))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x267)))+(((IkReal(-1.00000000000000))*(x264)))+(x266));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x263)*(x264)))+(((cj1)*(new_r20)))+(((new_r00)*(x265))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x263)*(x264)))+(((new_r01)*(x265)))+(((cj1)*(new_r21))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj1)*(x266)))+(((cj1)*(x267)))+(((new_r22)*(sj1))));
evalcond[7]=((IkReal(-1.00000000000000))+(((new_r02)*(x265)))+(((IkReal(-1.00000000000000))*(x264)*(x267)))+(((cj1)*(new_r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[16];
IkReal x268=((new_r22)+(((IkReal(-1.00000000000000))*(cj1))));
IkReal x269=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x268;
evalcond[2]=x268;
evalcond[3]=((sj1)+(new_r12));
evalcond[4]=new_r02;
evalcond[5]=new_r02;
evalcond[6]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[7]=((((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(new_r12))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(x269)))+(((cj1)*(new_r20))));
evalcond[9]=((((cj1)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x269))));
evalcond[10]=((((cj1)*(new_r12)))+(((new_r22)*(sj1))));
evalcond[11]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r12)*(x269))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r00)))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r00)), new_r01);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x270=IKsin(j0);
IkReal x271=IKcos(j0);
evalcond[0]=((new_r20)+(((sj1)*(x271))));
evalcond[1]=((new_r21)+(((sj1)*(x270))));
evalcond[2]=((x270)+(new_r00));
evalcond[3]=((((IkReal(-1.00000000000000))*(x271)))+(new_r01));
evalcond[4]=((((cj1)*(x271)))+(new_r10));
evalcond[5]=((((cj1)*(x270)))+(new_r11));
evalcond[6]=((((new_r20)*(sj1)))+(x271)+(((cj1)*(new_r10))));
evalcond[7]=((((cj1)*(new_r11)))+(((new_r21)*(sj1)))+(x270));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x272=((new_r22)+(((IkReal(-1.00000000000000))*(cj1))));
IkReal x273=((((IkReal(-1.00000000000000))*(sj1)))+(new_r12));
IkReal x274=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))));
evalcond[1]=x272;
evalcond[2]=x272;
evalcond[3]=x273;
evalcond[4]=new_r02;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x273;
evalcond[7]=((((new_r10)*(sj1)))+(((cj1)*(new_r20))));
evalcond[8]=((((new_r11)*(sj1)))+(((cj1)*(new_r21))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r12)*(x274)))+(((new_r22)*(sj1))));
evalcond[10]=((IkReal(-1.00000000000000))+(((new_r12)*(sj1)))+(((cj1)*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj1;
dummyeval[1]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[15];
IkReal x275=((IkReal(-1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x275;
evalcond[4]=new_r02;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x275;
evalcond[7]=new_r10;
evalcond[8]=new_r11;
evalcond[9]=new_r10;
evalcond[10]=new_r11;
evalcond[11]=new_r10;
evalcond[12]=new_r11;
evalcond[13]=new_r22;
evalcond[14]=x275;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, ((IkReal(-1.00000000000000))*(new_r20)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x276=IKsin(j0);
IkReal x277=IKcos(j0);
evalcond[0]=((new_r20)+(x277));
evalcond[1]=((new_r21)+(x276));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(x276));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x277))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x278=((IkReal(1.00000000000000))+(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
evalcond[3]=x278;
evalcond[4]=new_r02;
evalcond[5]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[6]=x278;
evalcond[7]=new_r10;
evalcond[8]=new_r11;
evalcond[9]=new_r10;
evalcond[10]=new_r11;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r10));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r11));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r22));
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r21, new_r20);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x279=IKsin(j0);
IkReal x280=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(x280))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x279)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(x279));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x280))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x281=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x281;
evalcond[2]=x281;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=new_r20;
evalcond[12]=new_r21;
evalcond[13]=((IkReal(-1.00000000000000))*(new_r12));
evalcond[14]=x281;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, new_r10);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x282=IKsin(j0);
IkReal x283=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((x282)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x283))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x283)))+(new_r10));
evalcond[3]=((((IkReal(-1.00000000000000))*(x282)))+(new_r11));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x284=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=x284;
evalcond[2]=x284;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((IkReal(-1.00000000000000))*(new_r02));
evalcond[10]=new_r12;
evalcond[11]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[12]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[13]=new_r12;
evalcond[14]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r10))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((IkReal(-1.00000000000000))*(new_r10)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, ((IkReal(-1.00000000000000))*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x285=IKcos(j0);
IkReal x286=IKsin(j0);
evalcond[0]=((x286)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x285)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[2]=((x285)+(new_r10));
evalcond[3]=((x286)+(new_r11));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((new_r11)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r11)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((new_r11)*(((IKabs(cj1) != 0)?((IkReal)1/(cj1)):(IkReal)1.0e30))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x287=IKsin(j0);
IkReal x288=IKcos(j0);
IkReal x289=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((new_r20)+(((sj1)*(x288))));
evalcond[1]=((new_r21)+(((sj1)*(x287))));
evalcond[2]=((x287)+(((IkReal(-1.00000000000000))*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x288)*(x289)))+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(x287)*(x289)))+(new_r11));
evalcond[6]=((x288)+(((IkReal(-1.00000000000000))*(new_r10)*(x289)))+(((new_r20)*(sj1))));
evalcond[7]=((x287)+(((new_r21)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r11)*(x289))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(new_r00, ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x290=IKsin(j0);
IkReal x291=IKcos(j0);
IkReal x292=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((sj1)*(x291)))+(new_r20));
evalcond[1]=((new_r21)+(((sj1)*(x290))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(x290));
evalcond[3]=((((IkReal(-1.00000000000000))*(x291)))+(((IkReal(-1.00000000000000))*(new_r01))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x291)*(x292)))+(new_r10));
evalcond[5]=((new_r11)+(((IkReal(-1.00000000000000))*(x290)*(x292))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r10)*(x292)))+(((new_r20)*(sj1)))+(x291));
evalcond[7]=((x290)+(((new_r21)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r11)*(x292))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x293=((IkReal(-1.00000000000000))*(gconst12));
if( IKabs(((new_r21)*(x293))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x293))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x293)), ((new_r20)*(x293)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x294=IKsin(j0);
IkReal x295=IKcos(j0);
IkReal x296=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((sj1)*(x295)))+(new_r20));
evalcond[1]=((new_r21)+(((sj1)*(x294))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)))+(x294));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)))+(((IkReal(-1.00000000000000))*(x295))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x295)*(x296)))+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(x294)*(x296)))+(new_r11));
evalcond[6]=((((new_r20)*(sj1)))+(x295)+(((IkReal(-1.00000000000000))*(new_r10)*(x296))));
evalcond[7]=((x294)+(((new_r21)*(sj1)))+(((IkReal(-1.00000000000000))*(new_r11)*(x296))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x297=((IkReal(-1.00000000000000))+(new_r22));
IkReal x298=((new_r12)*(sj2));
IkReal x299=((new_r02)*(sj2));
IkReal x300=((cj2)*(new_r12));
IkReal x301=((cj2)*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x297;
evalcond[2]=x297;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((x300)+(x299));
evalcond[10]=((((IkReal(-1.00000000000000))*(x300)))+(((IkReal(-1.00000000000000))*(x299))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x298)))+(x301));
evalcond[12]=new_r20;
evalcond[13]=new_r21;
evalcond[14]=((x298)+(((IkReal(-1.00000000000000))*(x301))));
evalcond[15]=x297;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst14)*(((((cj2)*(new_r10)))+(((new_r11)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((new_r10)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst14)*(((((cj2)*(new_r10)))+(((new_r11)*(sj2)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(cj2)*(new_r11)))+(((new_r10)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x302=IKsin(j0);
IkReal x303=IKcos(j0);
IkReal x304=((IkReal(1.00000000000000))*(sj2));
IkReal x305=((sj2)*(x302));
IkReal x306=((IkReal(1.00000000000000))*(x303));
IkReal x307=((sj2)*(x303));
IkReal x308=((cj2)*(x302));
IkReal x309=((cj2)*(x306));
evalcond[0]=((((cj2)*(new_r10)))+(x302)+(((new_r00)*(sj2))));
evalcond[1]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x306))));
evalcond[2]=((x308)+(x307)+(new_r10));
evalcond[3]=((x305)+(new_r00)+(((IkReal(-1.00000000000000))*(x309))));
evalcond[4]=((x305)+(((IkReal(-1.00000000000000))*(x309)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r10)*(x304)))+(((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x306))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r11)*(x304)))+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(x302))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x308)))+(new_r01)+(((IkReal(-1.00000000000000))*(x303)*(x304))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst13)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((new_r10)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst13)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2)))))), ((gconst13)*(((((new_r10)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r00)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x310=IKsin(j0);
IkReal x311=IKcos(j0);
IkReal x312=((IkReal(1.00000000000000))*(sj2));
IkReal x313=((sj2)*(x310));
IkReal x314=((IkReal(1.00000000000000))*(x311));
IkReal x315=((sj2)*(x311));
IkReal x316=((cj2)*(x310));
IkReal x317=((cj2)*(x314));
evalcond[0]=((((cj2)*(new_r10)))+(x310)+(((new_r00)*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x314)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[2]=((x315)+(x316)+(new_r10));
evalcond[3]=((x313)+(((IkReal(-1.00000000000000))*(x317)))+(new_r00));
evalcond[4]=((x313)+(((IkReal(-1.00000000000000))*(x317)))+(new_r11));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r10)*(x312)))+(((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x314))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x310)))+(((IkReal(-1.00000000000000))*(new_r11)*(x312)))+(((cj2)*(new_r01))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x316)))+(((IkReal(-1.00000000000000))*(x311)*(x312)))+(new_r01));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x318=((IkReal(1.00000000000000))+(new_r22));
IkReal x319=((IkReal(1.00000000000000))*(new_r12));
IkReal x320=((new_r02)*(sj2));
IkReal x321=((((IkReal(-1.00000000000000))*(sj2)*(x319)))+(((cj2)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j1, IkReal(6.28318530717959))));
evalcond[1]=x318;
evalcond[2]=x318;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=new_r20;
evalcond[7]=new_r21;
evalcond[8]=new_r02;
evalcond[9]=((x320)+(((cj2)*(new_r12))));
evalcond[10]=((((IkReal(-1.00000000000000))*(cj2)*(x319)))+(((IkReal(-1.00000000000000))*(x320))));
evalcond[11]=x321;
evalcond[12]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[13]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[14]=x321;
evalcond[15]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  && IKabs(evalcond[12]) < 0.0000010000000000  && IKabs(evalcond[13]) < 0.0000010000000000  && IKabs(evalcond[14]) < 0.0000010000000000  && IKabs(evalcond[15]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj2)*(sj2))))+(((IkReal(-1.00000000000000))*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst16)*(((((cj2)*(new_r01)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst16)*(((((cj2)*(new_r01)))+(((new_r00)*(sj2)))))), ((gconst16)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x322=IKsin(j0);
IkReal x323=IKcos(j0);
IkReal x324=((IkReal(1.00000000000000))*(sj2));
IkReal x325=((cj2)*(x322));
IkReal x326=((sj2)*(x322));
IkReal x327=((IkReal(1.00000000000000))*(x323));
IkReal x328=((x323)*(x324));
evalcond[0]=((((cj2)*(new_r10)))+(x322)+(((new_r00)*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x327)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[2]=((x325)+(((IkReal(-1.00000000000000))*(x328)))+(new_r10));
evalcond[3]=((x326)+(new_r00)+(((cj2)*(x323))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj2)*(x327)))+(((IkReal(-1.00000000000000))*(x322)*(x324)))+(new_r11));
evalcond[5]=((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x324)))+(x323));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r11)*(x324)))+(x322)+(((cj2)*(new_r01))));
evalcond[7]=((x325)+(new_r01)+(((IkReal(-1.00000000000000))*(x328))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst15)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst15)*(((((cj2)*(new_r10)))+(((new_r00)*(sj2)))))), ((gconst15)*(((((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj2)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x329=IKsin(j0);
IkReal x330=IKcos(j0);
IkReal x331=((IkReal(1.00000000000000))*(sj2));
IkReal x332=((cj2)*(x329));
IkReal x333=((sj2)*(x329));
IkReal x334=((IkReal(1.00000000000000))*(x330));
IkReal x335=((x330)*(x331));
evalcond[0]=((((cj2)*(new_r10)))+(x329)+(((new_r00)*(sj2))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x334)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[2]=((x332)+(((IkReal(-1.00000000000000))*(x335)))+(new_r10));
evalcond[3]=((x333)+(new_r00)+(((cj2)*(x330))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x329)*(x331)))+(((IkReal(-1.00000000000000))*(cj2)*(x334)))+(new_r11));
evalcond[5]=((((cj2)*(new_r00)))+(x330)+(((IkReal(-1.00000000000000))*(new_r10)*(x331))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r11)*(x331)))+(x329)+(((cj2)*(new_r01))));
evalcond[7]=((x332)+(new_r01)+(((IkReal(-1.00000000000000))*(x335))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x336=((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30);
if( IKabs(((x336)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((cj1)*(new_r20)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x336))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x336)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((cj1)*(new_r20)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x336)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x336)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((cj1)*(new_r20)*(sj2)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj1)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x336)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x337=IKsin(j0);
IkReal x338=IKcos(j0);
IkReal x339=((cj2)*(new_r01));
IkReal x340=((IkReal(1.00000000000000))*(cj1));
IkReal x341=((IkReal(1.00000000000000))*(sj2));
IkReal x342=((cj2)*(new_r00));
IkReal x343=((cj1)*(sj2));
IkReal x344=((sj2)*(x338));
IkReal x345=((IkReal(1.00000000000000))*(x338));
IkReal x346=((sj2)*(x337));
IkReal x347=((cj2)*(x337));
evalcond[0]=((((sj1)*(x338)))+(new_r20));
evalcond[1]=((new_r21)+(((sj1)*(x337))));
evalcond[2]=((((cj2)*(new_r10)))+(x337)+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[4]=((((x338)*(x343)))+(x347)+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj2)*(x338)*(x340)))+(x346)+(new_r00));
evalcond[6]=((((x337)*(x343)))+(((IkReal(-1.00000000000000))*(cj2)*(x345)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x338)*(x340)))+(((IkReal(-1.00000000000000))*(new_r10)*(x341)))+(x342));
evalcond[8]=((x339)+(((IkReal(-1.00000000000000))*(new_r11)*(x341)))+(((IkReal(-1.00000000000000))*(x337)*(x340))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x338)*(x341)))+(new_r01)+(((IkReal(-1.00000000000000))*(x340)*(x347))));
evalcond[10]=((((new_r10)*(x343)))+(((IkReal(-1.00000000000000))*(x340)*(x342)))+(((new_r20)*(sj1)))+(x338));
evalcond[11]=((((IkReal(-1.00000000000000))*(x339)*(x340)))+(((new_r21)*(sj1)))+(x337)+(((new_r11)*(x343))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x348=IKsin(j0);
IkReal x349=IKcos(j0);
IkReal x350=((cj2)*(new_r01));
IkReal x351=((IkReal(1.00000000000000))*(cj1));
IkReal x352=((IkReal(1.00000000000000))*(sj2));
IkReal x353=((cj2)*(new_r00));
IkReal x354=((cj1)*(sj2));
IkReal x355=((sj2)*(x349));
IkReal x356=((IkReal(1.00000000000000))*(x349));
IkReal x357=((sj2)*(x348));
IkReal x358=((cj2)*(x348));
evalcond[0]=((new_r20)+(((sj1)*(x349))));
evalcond[1]=((new_r21)+(((sj1)*(x348))));
evalcond[2]=((((cj2)*(new_r10)))+(x348)+(((new_r00)*(sj2))));
evalcond[3]=((((cj2)*(new_r11)))+(((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x356))));
evalcond[4]=((((x349)*(x354)))+(x358)+(new_r10));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj2)*(x349)*(x351)))+(x357)+(new_r00));
evalcond[6]=((((x348)*(x354)))+(((IkReal(-1.00000000000000))*(cj2)*(x356)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x349)*(x351)))+(x353)+(((IkReal(-1.00000000000000))*(new_r10)*(x352))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r11)*(x352)))+(((IkReal(-1.00000000000000))*(x348)*(x351)))+(x350));
evalcond[9]=((((IkReal(-1.00000000000000))*(x349)*(x352)))+(new_r01)+(((IkReal(-1.00000000000000))*(x351)*(x358))));
evalcond[10]=((((new_r10)*(x354)))+(((new_r20)*(sj1)))+(x349)+(((IkReal(-1.00000000000000))*(x351)*(x353))));
evalcond[11]=((((new_r21)*(sj1)))+(x348)+(((IkReal(-1.00000000000000))*(x350)*(x351)))+(((new_r11)*(x354))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x359=((IkReal(-1.00000000000000))*(gconst11));
if( IKabs(((new_r21)*(x359))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x359))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x359)), ((new_r20)*(x359)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x360=IKsin(j0);
IkReal x361=IKcos(j0);
IkReal x362=((cj2)*(new_r01));
IkReal x363=((IkReal(1.00000000000000))*(cj1));
IkReal x364=((IkReal(1.00000000000000))*(sj2));
IkReal x365=((cj2)*(new_r00));
IkReal x366=((cj1)*(sj2));
IkReal x367=((sj2)*(x361));
IkReal x368=((IkReal(1.00000000000000))*(x361));
IkReal x369=((sj2)*(x360));
IkReal x370=((cj2)*(x360));
evalcond[0]=((new_r20)+(((sj1)*(x361))));
evalcond[1]=((new_r21)+(((sj1)*(x360))));
evalcond[2]=((((cj2)*(new_r10)))+(x360)+(((new_r00)*(sj2))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x368)))+(((cj2)*(new_r11)))+(((new_r01)*(sj2))));
evalcond[4]=((x370)+(((x361)*(x366)))+(new_r10));
evalcond[5]=((x369)+(new_r00)+(((IkReal(-1.00000000000000))*(cj2)*(x361)*(x363))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj2)*(x368)))+(((x360)*(x366)))+(new_r11));
evalcond[7]=((((IkReal(-1.00000000000000))*(x361)*(x363)))+(x365)+(((IkReal(-1.00000000000000))*(new_r10)*(x364))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x360)*(x363)))+(x362)+(((IkReal(-1.00000000000000))*(new_r11)*(x364))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x361)*(x364)))+(((IkReal(-1.00000000000000))*(x363)*(x370)))+(new_r01));
evalcond[10]=((((new_r10)*(x366)))+(x361)+(((new_r20)*(sj1)))+(((IkReal(-1.00000000000000))*(x363)*(x365))));
evalcond[11]=((((new_r11)*(x366)))+(((IkReal(-1.00000000000000))*(x362)*(x363)))+(x360)+(((new_r21)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - HatarakiArm (2183776cdcbce92c9e8f2711068aa0d0)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
